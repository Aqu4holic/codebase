<snippet>
	<content><![CDATA[// author: BlackWhite
#include "bits/stdc++.h"
using namespace std;

#define int long long
#define rep(i, begin, end) for (auto i = begin; (begin > end ? i >= end : i <= end); i += (begin > end ? -1 : 1))
#define srep(i, begin, end, step) for (auto i = begin; (begin > end ? i >= end : i <= end); i += (begin > end ? -abs(step) : abs(step)))
mt19937 rd(chrono::steady_clock::now().time_since_epoch().count());
#define rand rd
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
const ll oo = 1e18;
const ld eps = 1e-9;
const string yes = "YES";
const string no = "NO";
const ld PI = acos(-1.0);
typedef pair<int,int> ii;
typedef vector <int> vi;
typedef vector <ii> vp;
#define all(x) begin(x), end(x)
#define sz(x) ((int) x.size())
#define clrscr system("cls");
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define pf push_front
#define ins insert
#define pob pop_back
#define pof pop_front
#define el '\n'

#define Fast ios_base::sync_with_stdio(false);cin.tie(NULL);
#define NAME ""
inline void io(int x){
	if (!x){
		freopen(NAME".inp", "r", stdin);
		return;
	}
	if (x == 1){
		freopen(NAME".inp", "r", stdin);
		freopen(NAME".out", "w", stdout);
		return;
	}
	freopen(NAME".out", "w", stdout);
}

const int NTEST = ;
const int N = ;

inline ll Rand(ll l, ll r) {
	if (l > r) swap(l, r);
	
	return l + rd() * 1LL * rd() % (r - l + 1);
}

signed main()
{
	Fast
	// io(0);

	srand(time(NULL));

	for (int iTest = 1; iTest <= NTEST; iTest++){
		ofstream inp((string(NAME) + ".inp").c_str());

		/*
			testgen code here
			
			ex:

			int n = Rand(1, N);

			inp << n << el;
		*/

		inp.close();

		system((string(NAME) + ".exe").c_str());
		system((string(NAME) + "_ans.exe").c_str());

		/*
			viết 2 phần mềm, 1 phần mềm là thuật đúng, 1 phần mềm là thuật trâu
		*/

		if (system(("fc " + string(NAME) + ".out " + string(NAME) + ".ans").c_str()) != 0){
			cout << "Test " << iTest << ": WRONG !\n";
		}
		else{
			cout << "Test " << iTest << ": CORRECT !\n";
		}
	}
	
	return 0;
}]]></content>
	<tabTrigger>testgen</tabTrigger>
	<description>Testgen for C++</description>
</snippet>
